import { Injectable } from '@angular/core';
import { environment } from '../environments/environment';
import { createClient, ChainModifiers } from 'contentful';
import { Observable, from } from 'rxjs';
import { shareReplay } from 'rxjs/operators';
// Import the types generated by contentful-ts-generator
import {
	TypeArticlePage,
	TypeArticlePageSkeleton,
} from '../contentfulmodels/contentful-types.ts';

// Get configuration from Angular environment
const CONFIG = {
	space: environment.SPACE_ID ?? '',
	accessToken: environment.CONTENT_DELIVERY_API_KEY ?? '',
	testEntryId: environment.TEST_ENTRY_ID ?? '',
};

@Injectable({
	providedIn: 'root',
})
export class ContentfulService {
	private readonly _contentfulClient = createClient({
		space: CONFIG.space,
		accessToken: CONFIG.accessToken,
	});

	// !! Cache for navigation to prevent repeated API calls
	private navigationCache$: Observable<any> | null = null;

	constructor() {}

	private transformNavItem(item: any): any {
		// !! Implement your navigation item transformation logic here
		return item;
	}

	/**
	 * !! Get navigation structure from Contentful
	 * !! Uses caching with shareReplay to avoid multiple API calls
	 */
	getNavigation(): Observable<any> {
		// !! Return cached navigation if available
		if (this.navigationCache$) {
			return this.navigationCache$;
		}

		// !! Fetch and transform navigation data
		const navigationPromise = this._contentfulClient
			.getEntries({
				content_type: 'navigation',
				include: 2, // !! Include 2 levels of references
				'fields.name': 'Main Navigation', // !! Assuming you have a field to identify your main nav
			})
			.then((response) => {
				// !! Get the main navigation entry
				const navEntry = response.items[0];
				if (!navEntry) return null;

				// !! Transform navigation items for easier consumption
				const navItems = navEntry.fields['items'];
				const items = Array.isArray(navItems)
					? navItems.map((item: any) => this.transformNavItem(item))
					: [];

				return {
					title: navEntry.fields['name'],
					items,
				};
			})
			.catch((error) => {
				console.error('Error fetching navigation:', error);
				return null;
			});

		// !! Convert Promise to Observable and cache it
		this.navigationCache$ = from(navigationPromise).pipe(shareReplay(1));
		return this.navigationCache$;
	}

	getEntries(): void {
		this._contentfulClient
			.getEntry<TypeArticlePageSkeleton>(CONFIG.testEntryId)
			.then((response) => console.log(response))
			.catch(console.error);
	}

	getPage(query?: object): Promise<TypeArticlePage<ChainModifiers>> {
		return this._contentfulClient
			.getEntry<TypeArticlePageSkeleton>(CONFIG.testEntryId)
			.then((res) => res as TypeArticlePage<ChainModifiers>);
	}
}
